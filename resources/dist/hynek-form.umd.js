(function(e,a){typeof exports=="object"&&typeof module<"u"?a(exports):typeof define=="function"&&define.amd?define(["exports"],a):(e=typeof globalThis<"u"?globalThis:e||self,a(e["Hynek/Form"]={}))})(this,(function(e){"use strict";class a{constructor(s){this.form=s,this.fields={},this.submitting=!1,this.submitted=!1,this.listeners={},this.init()}on(s,t){this.listeners[s]||(this.listeners[s]=[]),this.listeners[s].push(t)}emit(s,t){this.listeners[s]&&this.listeners[s].forEach(i=>i(t))}init(){this.form.querySelectorAll("input, textarea, select").forEach(t=>{this.fields[t.name]={el:t,touched:!1,dirty:!1,valid:t.checkValidity(),initialValue:t.value},t.addEventListener("blur",()=>{const i=this.fields[t.name];i.touched||(i.touched=!0,this.emit("field:touched",{name:t.name,field:i}))}),t.addEventListener("input",()=>{const i=this.fields[t.name],o=i.dirty,r=i.valid;i.dirty=t.value!==i.initialValue,i.valid=t.checkValidity(),i.dirty&&!o&&this.emit("field:dirty",{name:t.name,field:i}),i.valid!==r&&this.emit("field:validate",{name:t.name,field:i})})}),this.form.addEventListener("submit",t=>{this.submitting=!0,this.emit("form:submit:start",this.status),Object.values(this.fields).forEach(i=>{i.touched=!0,i.valid=i.el.checkValidity()}),this.form.checkValidity()?(this.submitted=!0,this.emit("form:submit:success",this.status),setTimeout(()=>{this.submitting=!1,this.emit("form:submit:end",this.status)},500)):(t.preventDefault(),this.submitting=!1,this.emit("form:submit:invalid",this.status))})}get status(){return{submitting:this.submitting,submitted:this.submitted,valid:this.form.checkValidity(),invalid:!this.form.checkValidity(),fields:this.fields}}}class n{constructor(s,t={}){this.form=s,this.options=t,this.formState=new a(s),this.init()}init(){this.form.addEventListener("submit",async s=>{s.preventDefault(),await this.submit()})}async submit(){const s=new FormData,t=this.form.querySelectorAll("input, textarea, select");this.formState.emit("form:submit:start",{formData:s,inputs:t}),t.forEach(r=>{s.append(r.name,r.value)});const i=await fetch(this.form.action,{method:this.form.method.toUpperCase(),body:s});if(!i.ok)throw new Error(i.error);const o=i.json();this.options.handleResponse?.(o),this.formState.emit("form:submit:end",o)}}e.AjaxSubmission=n,e.Formstatus=a,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
